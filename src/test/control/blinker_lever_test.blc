//  blinker.blc
//  blinker

// Types

struct Ratio
    let nom: nat8
    let denom: nat8
end

// Constants

const BLINKING_RATIO_TURNING: Ratio = { nom = 4, denom = 5}
const BLINKING_RATIO_WARNING: Ratio = { nom = 6, denom = 7}

const BLINKER_LEVER_MOVE_NONE: int32 = 0
const BLINKER_LEVER_MOVE_UP: int32 = 1
const BLINKER_LEVER_MOVE_DOWN: int32 = 2

const BLINKER_LEVER_POS_UP: int32 = 0
const BLINKER_LEVER_POS_CENTER: int32 = 1
const BLINKER_LEVER_POS_DOWN: int32 = 2

const ROTATION_INCREMENT: int32 = 1
const ROTATION_THRESHOLD: int32 = 3

// Helpers

function cap(val: int32, min: int32, max: int32) returns int32
    if val < min then
        return min
    elseif val > max then
        return max
    else
        return val
    end
end

// Note: ticks must be > 0
activity wait(ticks: nat8)
    var counter = ticks

    repeat
        counter = counter - 1
        await true
    until counter == 0 end
end

// Blinker lever handling

activity moveBlinkerLever(blinkerLeverMove: int32, prevBlinkerLeverPos: int32)(blinkerLeverPos: int32)
    repeat
        if blinkerLeverMove == BLINKER_LEVER_MOVE_UP then
            blinkerLeverPos = cap(prevBlinkerLeverPos - 1, BLINKER_LEVER_POS_UP, BLINKER_LEVER_POS_DOWN)
        elseif blinkerLeverMove == BLINKER_LEVER_MOVE_DOWN then
            blinkerLeverPos = cap(prevBlinkerLeverPos + 1, BLINKER_LEVER_POS_UP, BLINKER_LEVER_POS_DOWN)
        else
            blinkerLeverPos = prevBlinkerLeverPos
        end

        await true
    end
end

function updateRotationSum(rotation: int32)(rotationSum: int32)
    if rotation > 0 then
        if rotationSum < 0 then
            rotationSum = rotation
        else
            rotationSum = rotationSum + rotation
        end
    elseif rotation < 0 then
        if rotationSum > 0 then
            rotationSum = rotation
        else
            rotationSum = rotationSum + rotation
        end
    end
end

activity updateBlinkerLeverFromRotation(rotation: int32, movedBlinkerLeverPos: int32)(blinkerLeverPos: int32)
    var rotationSum: int32

    repeat
        if movedBlinkerLeverPos != BLINKER_LEVER_POS_CENTER then
            updateRotationSum(rotation)(rotationSum)

            if rotationSum >= ROTATION_THRESHOLD and movedBlinkerLeverPos == BLINKER_LEVER_POS_UP then
                blinkerLeverPos = BLINKER_LEVER_POS_CENTER
                rotationSum = 0
            elseif rotationSum <= -ROTATION_THRESHOLD and movedBlinkerLeverPos == BLINKER_LEVER_POS_DOWN then
                blinkerLeverPos = BLINKER_LEVER_POS_CENTER
                rotationSum = 0
            else
                blinkerLeverPos = movedBlinkerLeverPos
            end
        else
            blinkerLeverPos = movedBlinkerLeverPos
        end

        await true
    end
end

singleton activity monitorBlinkerLever(rotation: int32)(blinkerLeverPos: int32)
    @[CInput (binding="sensor_input.blinker_lever_move", header="env/blinker_env.h")]
    extern let blinkerLeverMove: int32         
    
    var movedBlinkerLeverPos: int32
    var localBlinkerLeverPos = blinkerLeverPos
    
    cobegin
        run moveBlinkerLever(blinkerLeverMove, prev localBlinkerLeverPos)(movedBlinkerLeverPos)
    with
        run updateBlinkerLeverFromRotation(rotation, movedBlinkerLeverPos)(localBlinkerLeverPos)
    with
        repeat
            blinkerLeverPos = localBlinkerLeverPos
            await true
        end
    end
end

// Blinking

activity blink(ratio: Ratio)(blinker: bool)
    repeat
        blinker = true
        run wait(ratio.nom)
        blinker = false
        run wait(ratio.denom)
    end
end

activity blinkWhileInPos(pos: int32, targetPos: int32)(blinker: bool)
    repeat
        await pos == targetPos
        when pos != targetPos abort
            run blink(BLINKING_RATIO_TURNING)(blinker)
        end
        blinker = false
    end
end

singleton activity controlBlinkers(warningPushed: bool, blinkerLeverPos: int32)
    @[COutput (binding="actuator_state.blinker_left_on", header="env/blinker_env.h")]
    extern var leftBlinker: bool         
    @[COutput (binding="actuator_state.blinker_right_on", header="env/blinker_env.h")]
    extern var rightBlinker: bool         
    @[COutput (binding="actuator_state.warning_indicator_on", header="env/blinker_env.h")]
    extern var warningIndicator: bool         
    
    repeat
        when warningPushed abort
            cobegin
                run blinkWhileInPos(blinkerLeverPos, BLINKER_LEVER_POS_UP)(rightBlinker)
            with
                run blinkWhileInPos(blinkerLeverPos, BLINKER_LEVER_POS_DOWN)(leftBlinker)
            end
        end
        when warningPushed abort
            cobegin
                run blink(BLINKING_RATIO_WARNING)(warningIndicator)
            with
                repeat
                    leftBlinker = warningIndicator
                    rightBlinker = warningIndicator
                    await true
                end
            end
        end
        warningIndicator = false
        leftBlinker = false
        rightBlinker = false
    end
end

// Rotation monitoring

singleton activity monitorWheelPos()(rotation: int32)
    @[CInput (binding="sensor_input.rotation", header="env/blinker_env.h")]
    extern let sensedRotation: int32
    @[COutput (binding="actuator_state.wheel_pos", header="env/blinker_env.h")]
    extern var wheelPos: int32

    repeat
        rotation = sensedRotation
        wheelPos = wheelPos + rotation
        await true
    end
end 

// Top Level

@[EntryPoint]
singleton activity main()
    @[COutput (binding="actuator_state.blinker_lever_pos", header="env/blinker_env.h")]
    extern var blinkerLeverPos: int32

    const NO_ROTATION = 0 : int32 // expression with type annotation, left-hand side type deduction

    run monitorBlinkerLever(NO_ROTATION)(blinkerLeverPos)
end
